<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.JsonPatch</name>
    </assembly>
    <members>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Add(System.String,System.Object)">
            <summary>
            Add operation.  Will result in, for example,
            { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Remove(System.String)">
            <summary>
            Remove value at target location.  Will result in, for example,
            { "op": "remove", "path": "/a/b/c" }
            </summary>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Replace(System.String,System.Object)">
            <summary>
            Replace value.  Will result in, for example,
            { "op": "replace", "path": "/a/b/c", "value": 42 }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Move(System.String,System.String)">
            <summary>
            Removes value at specified location and add it to the target location.  Will result in, for example:
            { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Copy(System.String,System.String)">
            <summary>
            Copy the value at specified location to the target location.  Willr esult in, for example:
            { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.ApplyTo(System.Object)">
            <summary>
            Apply this JsonPatchDocument 
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.ApplyTo(System.Object,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Apply this JsonPatchDocument 
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="logErrorAction">Action to log errors</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.ApplyTo(System.Object,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)">
            <summary>
            Apply this JsonPatchDocument  
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="adapter">IObjectAdapter instance to use when applying</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Add operation.  Will result in, for example,
            { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)">
            <summary>
            Add value to list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <param name="position">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)">
            <summary>
            At value at end of list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Remove value at target location.  Will result in, for example,
            { "op": "remove", "path": "/a/b/c" }
            </summary>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Remove value from list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="position">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Remove value from end of list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Replace value.  Will result in, for example,
            { "op": "replace", "path": "/a/b/c", "value": 42 }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)">
            <summary>
            Replace value in a list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <param name="position">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)">
            <summary>
            Replace value at end of a list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes value at specified location and add it to the target location.  Will result in, for example:
            { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Move from a position in a list to a new location
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Move from a property to a location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <param name="positionTo">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Move from a position in a list to another location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position (source)</param>
            <param name="path">target location</param>
            <param name="positionTo">position (target)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Move from a position in a list to the end of another list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Move to the end of a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy the value at specified location to the target location.  Willr esult in, for example:
            { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy from a position in a list to a new location
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Copy from a property to a location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>      
            <param name="path">target location</param>
            <param name="positionTo">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Copy from a position in a list to a new location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position (source)</param>
            <param name="path">target location</param>
            <param name="positionTo">position (target)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Copy from a position in a list to the end of another list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Copy to the end of a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0)">
            <summary>
            Apply this JsonPatchDocument 
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Apply this JsonPatchDocument 
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="logErrorAction">Action to log errors</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)">
            <summary>
            Apply this JsonPatchDocument  
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="adapter">IObjectAdapter instance to use when applying</param>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError">
            <summary>
            Captures error message and the related entity and the operation that caused it.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchError.#ctor(System.Object,Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError"/>.
            </summary>
            <param name="affectedObject">The object that is affected by the error.</param>
            <param name="operation">The <see cref="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.Operation"/> that caused the error.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.AffectedObject">
            <summary>
            Gets the object that is affected by the error.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.Operation">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.Operation"/> that caused the error.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter">
            <summary>
            Defines the operations that can be performed on a JSON patch document.
            </summary>  
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.#ctor(Newtonsoft.Json.Serialization.IContractResolver,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter"/>.
            </summary>
            <param name="contractResolver">The <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>.</param>
            <param name="logErrorAction">The <see cref="T:System.Action"/> for logging <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.ContractResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.LogErrorAction">
            <summary>
            Action for logging <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Add(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             The "add" operation performs one of the following functions,
             depending upon what the target location references:
            
             o  If the target location specifies an array index, a new value is
                inserted into the array at the specified index.
            
             o  If the target location specifies an object member that does not
                already exist, a new member is added to the object.
            
             o  If the target location specifies an object member that does exist,
                that member's value is replaced.
            
             The operation object MUST contain a "value" member whose content
             specifies the value to be added.
            
             For example:
            
             { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            
             When the operation is applied, the target location MUST reference one
             of:
            
             o  The root of the target document - whereupon the specified value
                becomes the entire content of the target document.
            
             o  A member to add to an existing object - whereupon the supplied
                value is added to that object at the indicated location.  If the
                member already exists, it is replaced by the specified value.
            
             o  An element to add to an existing array - whereupon the supplied
                value is added to the array at the indicated location.  Any
                elements at or above the specified index are shifted one position
                to the right.  The specified index MUST NOT be greater than the
                number of elements in the array.  If the "-" character is used to
                index the end of the array (see [RFC6901]), this has the effect of
                appending the value to the array.
            
             Because this operation is designed to add to existing objects and
             arrays, its target location will often not exist.  Although the
             pointer's error handling algorithm will thus be invoked, this
             specification defines the error handling behavior for "add" pointers
             to ignore that error and add the value as specified.
            
             However, the object itself or an array containing it does need to
             exist, and it remains an error for that not to be the case.  For
             example, an "add" with a target location of "/a/b" starting with this
             document:
            
             { "a": { "foo": 1 } }
            
             is not an error, because "a" exists, and "b" will be added to its
             value.  It is an error in this document:
            
             { "q": { "bar": 2 } }
            
             because "a" does not exist.
             </summary>
             <param name="operation">The add operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Add(System.String,System.Object,System.Object,Microsoft.AspNetCore.JsonPatch.Operations.Operation)">
            <summary>
            Add is used by various operations (eg: add, copy, ...), yet through different operations;
            This method allows code reuse yet reporting the correct operation on error
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Move(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             The "move" operation removes the value at a specified location and
             adds it to the target location.
            
             The operation object MUST contain a "from" member, which is a string
             containing a JSON Pointer value that references the location in the
             target document to move the value from.
            
             The "from" location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            
             This operation is functionally identical to a "remove" operation on
             the "from" location, followed immediately by an "add" operation at
             the target location with the value that was just removed.
            
             The "from" location MUST NOT be a proper prefix of the "path"
             location; i.e., a location cannot be moved into one of its children.
             </summary>
             <param name="operation">The move operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Remove(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             The "remove" operation removes the value at the target location.
            
             The target location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "remove", "path": "/a/b/c" }
            
             If removing an element from an array, any elements above the
             specified index are shifted one position to the left.
             </summary>
             <param name="operation">The remove operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Remove(System.String,System.Object,Microsoft.AspNetCore.JsonPatch.Operations.Operation)">
            <summary>
            Remove is used by various operations (eg: remove, move, ...), yet through different operations;
            This method allows code reuse yet reporting the correct operation on error.  The return value
            contains the type of the item that has been removed (and a bool possibly signifying an error)
            This can be used by other methods, like replace, to ensure that we can pass in the correctly 
            typed value to whatever method follows.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Replace(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             The "replace" operation replaces the value at the target location
             with a new value.  The operation object MUST contain a "value" member
             whose content specifies the replacement value.
            
             The target location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "replace", "path": "/a/b/c", "value": 42 }
            
             This operation is functionally identical to a "remove" operation for
             a value, followed immediately by an "add" operation at the same
             location with the replacement value.
            
             Note: even though it's the same functionally, we do not call remove + add
             for performance reasons (multiple checks of same requirements).
             </summary>
             <param name="operation">The replace operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Copy(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
              The "copy" operation copies the value at a specified location to the
              target location.
            
              The operation object MUST contain a "from" member, which is a string
              containing a JSON Pointer value that references the location in the
              target document to copy the value from.
            
              The "from" location MUST exist for the operation to be successful.
            
              For example:
            
              { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            
              This operation is functionally identical to an "add" operation at the
              target location using the value specified in the "from" member.
            
              Note: even though it's the same functionally, we do not call add with
              the value specified in from for performance reasons (multiple checks of same requirements).
             </summary>
             <param name="operation">The copy operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.GetValueAtLocation(System.String,System.Object,Microsoft.AspNetCore.JsonPatch.Operations.Operation)">
            <summary>
            Method is used by Copy and Move to avoid duplicate code
            </summary>
            <param name="location">Location where value should be</param>
            <param name="objectToGetValueFrom">Object to inspect for the desired value</param>
            <param name="operationToReport">Operation to report in case of an error</param>
            <returns>GetValueResult containing value and a bool signifying a possible error</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Helpers.GetValueResult">
            <summary>
            Return value for the helper method used by Copy/Move.  Needed to ensure we can make a different
            decision in the calling method when the value is null because it cannot be fetched (HasError = true) 
            versus when it actually is null (much like why RemovedPropertyTypeResult is used for returning 
            type in the Remove operation).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Helpers.GetValueResult.PropertyValue">
            <summary>
            The value of the property we're trying to get
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Helpers.GetValueResult.HasError">
            <summary>
            HasError: true when an error occurred, the operation didn't complete succesfully
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Helpers.RemovedPropertyTypeResult">
            <summary>
            Return value for Remove operation.  The combination tells us what to do next (if this operation
            is called from inside another operation, eg: Replace, Copy.
            
            Possible combo:
            - ActualType contains type: operation succesfully completed, can continue when called from inside
              another operation
            - ActualType null and HasError true: operation not completed succesfully, should not be allowed to continue
            - ActualType null and HasError false: operation completed succesfully, but we should not be allowed to 
              continue when called from inside another method as we could not verify the type of the removed property.
              This happens when the value of an item in an ExpandoObject dictionary is null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Helpers.RemovedPropertyTypeResult.ActualType">
            <summary>
            The type of the removed property (value)
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Helpers.RemovedPropertyTypeResult.HasError">
            <summary>
            HasError: true when an error occurred, the operation didn't complete succesfully
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty">
            <summary>
            Metadata for JsonProperty.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty.#ctor(Newtonsoft.Json.Serialization.JsonProperty,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty.Property">
            <summary>
            Gets or sets JsonProperty.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty.Parent">
            <summary>
            Gets or sets Parent.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotDeterminePropertyType">
            <summary>
            The type of the property at path '{0}' could not be determined.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotDeterminePropertyType(System.Object)">
            <summary>
            The type of the property at path '{0}' could not be determined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotReadProperty">
            <summary>
            The property at '{0}' could not be read.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotReadProperty(System.Object)">
            <summary>
            The property at '{0}' could not be read.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotUpdateProperty">
            <summary>
            The property at path '{0}' could not be updated.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotUpdateProperty(System.Object)">
            <summary>
            The property at path '{0}' could not be updated.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.DictionaryKeyNotFound">
            <summary>
            The key '{0}' was not found.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatDictionaryKeyNotFound(System.Object)">
            <summary>
            The key '{0}' was not found.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidIndexForArrayProperty">
            <summary>
            For operation '{0}' on array property at path '{1}', the index is larger than the array size.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidIndexForArrayProperty(System.Object,System.Object)">
            <summary>
            For operation '{0}' on array property at path '{1}', the index is larger than the array size.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidJsonPatchDocument">
            <summary>
            The type '{0}' was malformed and could not be parsed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidJsonPatchDocument(System.Object)">
            <summary>
            The type '{0}' was malformed and could not be parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidPathForArrayProperty">
            <summary>
            For operation '{0}', the provided path is invalid for array property at path '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidPathForArrayProperty(System.Object,System.Object)">
            <summary>
            For operation '{0}', the provided path is invalid for array property at path '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidValueForPath">
            <summary>
            The provided string '{0}' is an invalid path.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidValueForPath(System.Object)">
            <summary>
            The provided string '{0}' is an invalid path.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidValueForProperty">
            <summary>
            The value '{0}' is invalid for property at path '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidValueForProperty(System.Object,System.Object)">
            <summary>
            The value '{0}' is invalid for property at path '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.NegativeIndexForArrayProperty">
            <summary>
            For operation '{0}' on array property at path '{1}', the index is negative.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatNegativeIndexForArrayProperty(System.Object,System.Object)">
            <summary>
            For operation '{0}' on array property at path '{1}', the index is negative.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.ParameterMustMatchType">
            <summary>
            '{0}' must be of type '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatParameterMustMatchType(System.Object,System.Object)">
            <summary>
            '{0}' must be of type '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.PropertyCannotBeAdded">
            <summary>
            The property at path '{0}' could not be added.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatPropertyCannotBeAdded(System.Object)">
            <summary>
            The property at path '{0}' could not be added.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.PropertyCannotBeRemoved">
            <summary>
            The property at path '{0}' could not be removed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatPropertyCannotBeRemoved(System.Object)">
            <summary>
            The property at path '{0}' could not be removed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.PropertyDoesNotExist">
            <summary>
            Property does not exist at path '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatPropertyDoesNotExist(System.Object)">
            <summary>
            Property does not exist at path '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.TestOperationNotSupported">
            <summary>
            The test operation is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatTestOperationNotSupported">
            <summary>
            The test operation is not supported.
            </summary>
        </member>
    </members>
</doc>
