<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Array" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ArrayConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>Fournit un convertisseur de type de base pour les types numériques qui ne sont pas à virgule flottante.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BaseNumberConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <returns>true si le convertisseur peut effectuer la conversion ; sinon, false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous voulez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné à l'aide du contexte.</summary>
      <returns>true si le convertisseur peut effectuer la conversion ; sinon, false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="t">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous souhaitez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en type natif du convertisseur.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation du nombre. </param>
      <param name="value">Objet à convertir. </param>
      <exception cref="T:System.Exception">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet spécifié dans un autre type.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation du nombre. </param>
      <param name="value">Objet à convertir. </param>
      <param name="destinationType">Type dans lequel convertir l'objet. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Boolean" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BooleanConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet booléen en utilisant le contexte spécifié.</summary>
      <returns>true si cet objet peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur donné en objet booléen.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture vers laquelle effectuer la conversion.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 8 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ByteConverter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets de caractère Unicode vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CharConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet de caractère Unicode à l'aide du contexte spécifié.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet de caractère Unicode.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en objet de caractère Unicode à l'aide des arguments.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets de collection vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CollectionConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.Ce paramètre doit hériter de <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.DateTime" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.DateTime" /> à l'aide du contexte spécifié.</summary>
      <returns>true si cet objet peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur donné en <see cref="T:System.DateTime" />.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en <see cref="T:System.DateTime" /> en utilisant les arguments.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>Fournit un convertisseur de type pour convertir les structures <see cref="T:System.DateTimeOffset" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur qui indique si un objet du type source spécifié peut être converti en <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>true si le type spécifié peut être converti en <see cref="T:System.DateTimeOffset" /> ; sinon, false.</returns>
      <param name="context">Contexte de format de date.</param>
      <param name="sourceType">Type source à vérifier.</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur qui indique si un <see cref="T:System.DateTimeOffset" /> peut être converti en objet du type spécifié.</summary>
      <returns>true si un <see cref="T:System.DateTimeOffset" /> peut être converti au type spécifié ; sinon, false.</returns>
      <param name="context">Contexte de format de date.</param>
      <param name="destinationType">Type de destination à vérifier.</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet spécifié en <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> qui représente l'objet spécifié.</returns>
      <param name="context">Contexte de format de date.</param>
      <param name="culture">Culture de date.</param>
      <param name="value">Objet à convertir.</param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit <see cref="T:System.DateTimeOffset" /> en un objet du type spécifié.</summary>
      <returns>Objet du type spécifié qui représente <see cref="T:System.DateTimeOffset" />. </returns>
      <param name="context">Contexte de format de date.</param>
      <param name="culture">Culture de date.</param>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> à convertir.</param>
      <param name="destinationType">Type dans lequel convertir.</param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Decimal" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DecimalConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en <see cref="T:System.Decimal" /> en utilisant les arguments.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur. </param>
      <exception cref="T:System.ArgumentNullException">Le <paramref name="destinationType" /> est null. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets numériques à virgule flottante double précision vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DoubleConverter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Enum" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EnumConverter" /> pour le type donné.</summary>
      <param name="type">
        <see cref="T:System.Type" /> qui représente le type d'énumération à associer à ce convertisseur d'énumération. </param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet d'énumération à l'aide du contexte spécifié.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur spécifié en objet d'énumération.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> n'est pas une valeur valide pour l'énumération. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>Spécifie le type de l'énumérateur auquel ce convertisseur est associé.</summary>
      <returns>Type de l'énumérateur auquel ce convertisseur est associé.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Guid" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.GuidConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet GUID utilisant le contexte.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet GUID.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet donné en un autre type.</summary>
      <returns>Objet converti.</returns>
      <param name="context">Contexte de formateur. </param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">Objet à convertir. </param>
      <param name="destinationType">Type dans lequel convertir l'objet. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers signés 16 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int16Converter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers signés 32 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int32Converter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers signés 64 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int64Converter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Fournit des informations contextuelles sur un composant telles que son conteneur et son descripteur de propriété.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Obtient le conteneur représentant cette demande <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> avec le jeu d'objets pour ce <see cref="T:System.ComponentModel.TypeDescriptor" /> ; sinon, null s'il n'y a aucun conteneur ou si <see cref="T:System.ComponentModel.TypeDescriptor" /> n'utilise pas d'objets externes.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Obtient l'objet qui est connecté avec cette demande de descripteur de type.</summary>
      <returns>Objet qui appelle la méthode sur <see cref="T:System.ComponentModel.TypeDescriptor" /> ; sinon, null s'il n'y a aucun objet responsable de l'appel.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns>true si cet objet peut être modifié ; sinon false.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Obtient <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui est associé à l'élément de contexte donné.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'élément de contexte donné ; sinon, null s'il n'y a aucun <see cref="T:System.ComponentModel.PropertyDescriptor" /> responsable de l'appel.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>Fournit un convertisseur de type pour convertir des chaînes multilignes en une chaîne simple.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MultilineStringConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en objet du type spécifié, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />Si null est passée, la culture est supposée être celle en cours.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre de valeur doit être converti.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>Fournit une conversion automatique entre un type Nullable et son type primitif sous-jacent.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type">Type Nullable spécifié.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> n'est pas un type Nullable.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur, à l'aide du contexte spécifié.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel effectuer la conversion.</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié, à l'aide du contexte déterminé.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type vers lequel effectuer la conversion.</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet du type de ce convertisseur, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en objet du type spécifié, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre de valeur doit être converti.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>Obtient le type Nullable.</summary>
      <returns>
        <see cref="T:System.Type" /> qui représente le type Nullable.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>Obtient la liste sous-jacente.</summary>
      <returns>
        <see cref="T:System.Type" /> qui représente le type sous-jacent.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>Obtient le convertisseur de type sous-jacent.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> qui représente le convertisseur de type sous-jacent.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Fournit une abstraction d'une propriété sur une classe.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 8 bits vers et à partir d'une chaîne.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SByteConverter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets numériques à virgule flottante simple précision vers et à partir d'autres représentations différentes.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SingleConverter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets de type chaîne vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.StringConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en chaîne utilisant le contexte spécifié.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur spécifiée en objet <see cref="T:System.String" />.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser. </param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion n'a pas pu être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets <see cref="T:System.TimeSpan" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TimeSpanConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.TimeSpan" /> à l'aide du contexte spécifié.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible. </exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en <see cref="T:System.TimeSpan" />.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible. </exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet donné en un autre type. </summary>
      <returns>Objet converti.</returns>
      <param name="context">Contexte de formateur. </param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">Objet à convertir. </param>
      <param name="destinationType">Type dans lequel convertir l'objet. </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Propose un procédé unifié pour convertir les types de valeurs en d'autres types, ainsi que pour accéder aux valeurs et sous-propriétés standard.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur, à l'aide du contexte spécifié.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié, à l'aide du contexte déterminé.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type vers lequel effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type vers lequel effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet du type de ce convertisseur, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle. </param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Convertit la valeur donnée en valeur du type de ce convertisseur.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>Convertit la chaîne donnée en représentation sous forme de chaîne du type de ce convertisseur, à l'aide de la culture dite indifférente.</summary>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <param name="text">
        <see cref="T:System.String" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>Convertit le texte donné en objet, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />Si null est passée, la culture est supposée être celle en cours.</param>
      <param name="text">
        <see cref="T:System.String" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Convertit le texte spécifié en objet.</summary>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <param name="text">Représentation textuelle de l'objet à convertir. </param>
      <exception cref="T:System.NotSupportedException">Impossible de convertir la chaîne vers l'objet approprié. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en objet du type spécifié, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />Si null est passée, la culture est supposée être celle en cours.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti. </param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="destinationType" /> est null. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en objet du type spécifié, à l'aide des arguments.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti. </param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="destinationType" /> est null. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>Convertit la valeur spécifiée en représentation sous forme de chaîne de culture dite indifférente.</summary>
      <returns>
        <see cref="T:System.String" /> qui représente la valeur convertie.</returns>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit la valeur donnée en représentation sous forme de chaîne, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />Si null est passée, la culture est supposée être celle en cours.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Convertit la valeur spécifiée en représentation sous forme de chaîne.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>Retourne une exception à lever lorsqu'une conversion ne peut pas être effectuée.</summary>
      <returns>
        <see cref="T:System.Exception" /> représentant l'exception à lever lorsqu'une conversion ne peut pas être effectuée.</returns>
      <param name="value">
        <see cref="T:System.Object" /> à convertir, ou null si l'objet n'est pas disponible. </param>
      <exception cref="T:System.NotSupportedException">Automatiquement levée par cette méthode. </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>Retourne une exception à lever lorsqu'une conversion ne peut pas être effectuée.</summary>
      <returns>
        <see cref="T:System.Exception" /> représentant l'exception à lever lorsqu'une conversion ne peut pas être effectuée.</returns>
      <param name="value">
        <see cref="T:System.Object" /> à convertir, ou null si l'objet n'est pas disponible. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type vers lequel la conversion tentait de s'effectuer. </param>
      <exception cref="T:System.NotSupportedException">Automatiquement levée par cette méthode. </exception>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Spécifie quel type utiliser comme convertisseur pour l'objet auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le nom de type spécifié comme étant le convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="typeName">Nom qualifié complet de la classe à utiliser pour la conversion de données de l'objet auquel cet attribut est lié. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le type spécifié comme convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type de la classe de convertisseur à utiliser pour la conversion de données de l'objet auquel cet attribut est lié. </param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtient le nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié.</summary>
      <returns>Nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié, ou une chaîne vide ("") s'il n'en existe aucun.La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours.</summary>
      <returns>true si la valeur de l'objet donné est égale à celle du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours ; sinon, false.</returns>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>Fournit des informations relatives aux caractéristiques d'un composant telles que ses attributs, ses propriétés et ses événements.Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>Retourne un convertisseur de type pour le type spécifié.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié.</returns>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur null. </exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>Fournit un convertisseur de type qui peut être utilisé pour renseigner une zone de liste avec les types disponibles.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeListConverter" /> en utilisant le tableau de types comme types disponibles.</summary>
      <param name="types">Tableau de type <see cref="T:System.Type" /> à utiliser comme types disponibles. </param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur qui indique si ce convertisseur peut convertir le <see cref="T:System.Type" /> spécifié de l'objet de source à l'aide du contexte donné.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> de l'objet source.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <returns>true si ce convertisseur peut effectuer la conversion ; sinon false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion. </param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet spécifié en type natif du convertisseur.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> spécifiant la culture utilisée pour représenter la police. </param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif.Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur null. </exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée. </exception>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 16 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt16Converter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 32 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt32Converter" />. </summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 64 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt64Converter" />. </summary>
    </member>
  </members>
</doc>