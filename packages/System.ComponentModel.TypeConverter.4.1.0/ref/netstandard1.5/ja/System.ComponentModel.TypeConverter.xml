<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>
        <see cref="T:System.Array" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ArrayConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>非浮動小数点型の基本型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.BaseNumberConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを確認します。</summary>
      <returns>コンバーターが操作を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を返します。</summary>
      <returns>コンバーターが操作を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="t">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">数を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <exception cref="T:System.Exception">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを別の型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">数を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>
        <see cref="T:System.Boolean" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.BooleanConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを Boolean オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <returns>このオブジェクトが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定の値オブジェクトを Boolean オブジェクトに変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">変換後のカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>8 ビット符号なし整数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ByteConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Unicode 文字オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CharConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを Unicode 文字オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトを Unicode 文字オブジェクトに変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを Unicode 文字オブジェクトに変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>コレクション オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CollectionConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。このパラメーターは、<see cref="T:System.Collections.ICollection" /> から継承する必要があります。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>
        <see cref="T:System.DateTime" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DateTimeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.DateTime" /> に変換できるかどうかを示す値を取得します。</summary>
      <returns>このオブジェクトが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値オブジェクトを <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 構造体のさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した変換元の型のオブジェクトを <see cref="T:System.DateTimeOffset" /> に変換できるかどうか示す値を返します。</summary>
      <returns>指定した型を <see cref="T:System.DateTimeOffset" /> に変換できる場合は true。それ以外の場合は false。</returns>
      <param name="context">日付形式コンテキスト。</param>
      <param name="sourceType">確認する対象の変換元の型。</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した型のオブジェクトに <see cref="T:System.DateTimeOffset" /> を変換できるかどうか示す値を返します。</summary>
      <returns>指定した型に <see cref="T:System.DateTimeOffset" /> を変換できる場合は true。それ以外の場合は false。</returns>
      <param name="context">日付形式コンテキスト。</param>
      <param name="destinationType">確認する対象の変換先の型。</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトを <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <returns>指定したオブジェクトを表す <see cref="T:System.DateTimeOffset" />。</returns>
      <param name="context">日付形式コンテキスト。</param>
      <param name="culture">日付カルチャ。</param>
      <param name="value">変換されるオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> を、指定した型のオブジェクトに変換します。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> を表す指定した型のオブジェクト。</returns>
      <param name="context">日付形式コンテキスト。</param>
      <param name="culture">日付カルチャ。</param>
      <param name="value">変換される <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType">変換後の型。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>
        <see cref="T:System.Decimal" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DecimalConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを <see cref="T:System.Decimal" /> に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>倍精度浮動小数点数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DoubleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>
        <see cref="T:System.Enum" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>特定の型の <see cref="T:System.ComponentModel.EnumConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この列挙体コンバーターに関連付ける列挙体の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを列挙オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値オブジェクトを列挙オブジェクトに変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> は、列挙体に対して有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>このコンバーターが関連付けられている列挙子の型を指定します。</summary>
      <returns>このコンバーターが関連付けられている列挙子の型。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>
        <see cref="T:System.Guid" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.GuidConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用して特定の型のオブジェクトを GUID オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトを GUID オブジェクトに変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを別の型に変換します。</summary>
      <returns>変換後のオブジェクト。</returns>
      <param name="context">書式指定コンテキスト。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>16 ビット符号付き整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int16Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>32 ビット符号付き整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int32Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>64 ビット符号付き整数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int64Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>コンテナーやプロパティ記述子などの、コンポーネントに関するコンテキスト情報を提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> 要求を表すコンテナーを取得します。</summary>
      <returns>この <see cref="T:System.ComponentModel.TypeDescriptor" /> が使用する一連のオブジェクトを格納する <see cref="T:System.ComponentModel.IContainer" />。コンテナーがない場合、または <see cref="T:System.ComponentModel.TypeDescriptor" /> が外部オブジェクトを使用しない場合は null。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>この型記述子の要求に関連付けられているオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> でメソッドを呼び出すオブジェクト。この呼び出しを行うオブジェクトがない場合は null。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントを発生させます。</summary>
      <returns>このオブジェクトを変更できる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>特定のコンテキスト項目に関連付けられている <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns>特定のコンテキスト項目について説明する <see cref="T:System.ComponentModel.PropertyDescriptor" />。呼び出しを行う <see cref="T:System.ComponentModel.PropertyDescriptor" /> がない場合は null。</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>複数行文字列から単純文字列への変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.MultilineStringConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />null が渡された場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">value パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>null 許容型とその基になるプリミティブ型との間の自動変換を行います。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.NullableConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">指定された、null 許容型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が null 許容型ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、コンバーターが特定の型のオブジェクトをコンバーターの型に変換できるかどうかを示す値を返します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターが、指定したコンテキストを使用して、指定した型にオブジェクトを変換できるかどうかを示す値を返します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定したオブジェクトをコンバーターの型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">value パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>null 許容型を取得します。</summary>
      <returns>null 許容型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>基になる型を取得します。</summary>
      <returns>基になる型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>基になる型コンバーターを取得します。</summary>
      <returns>基になる型コンバーターを表す <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>クラスのプロパティの抽象化を提供します。</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>8 ビット符号なし整数オブジェクトの文字列への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SByteConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>単精度浮動小数点数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SingleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>文字列オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.StringConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターで、指定したコンテキストを使用して、指定したソース型のオブジェクトを文字列に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値オブジェクトを <see cref="T:System.String" /> オブジェクトに変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換できませんでした。</exception>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>
        <see cref="T:System.TimeSpan" /> 型オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TimeSpanConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.TimeSpan" /> に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトを <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを別の型に変換します。</summary>
      <returns>変換後のオブジェクト。</returns>
      <param name="context">書式指定コンテキスト。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>値の型を他の型に変換し、標準値とサブプロパティにアクセスするための統一的な方法を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、コンバーターが特定の型のオブジェクトをコンバーターの型に変換できるかどうかを示す値を返します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>コンバーターが特定の型のオブジェクトをコンバーターの型に変換できるかどうかを示す値を返します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターが、指定したコンテキストを使用して、指定した型にオブジェクトを変換できるかどうかを示す値を返します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>コンバーターがオブジェクトを指定した型に変換できるかどうかを示す値を返します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定したオブジェクトをコンバーターの型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>指定した値をコンバーターの型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>インバリアント カルチャを使用して、指定した文字列をコンバーターの型に変換します。</summary>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <param name="text">変換対象の <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定したテキストをオブジェクトに変換します。</summary>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />null が渡された場合は、現在のカルチャが使用されます。</param>
      <param name="text">変換対象の <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>指定したテキストをオブジェクトに変換します。</summary>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <param name="text">変換対象のオブジェクトのテキスト形式。</param>
      <exception cref="T:System.NotSupportedException">文字列を適切なオブジェクトに変換できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />null が渡された場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> パラメーターが null です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> パラメーターが null です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>指定した値を、インバリアント カルチャを使用した文字列形式に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.String" />。</returns>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値を文字列形式に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />null が渡された場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>指定した値を文字列形式に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>変換を実行できなかった場合にスローされる例外を返します。</summary>
      <returns>変換を実行できなかった場合にスローされる例外を表す <see cref="T:System.Exception" />。</returns>
      <param name="value">変換対象の <see cref="T:System.Object" />。オブジェクトを使用できない場合は、null。</param>
      <exception cref="T:System.NotSupportedException">このメソッドによって自動的にスローされます。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>変換を実行できなかった場合にスローされる例外を返します。</summary>
      <returns>変換を実行できなかった場合にスローされる例外を表す <see cref="T:System.Exception" />。</returns>
      <param name="value">変換対象の <see cref="T:System.Object" />。オブジェクトを使用できない場合は、null。</param>
      <param name="destinationType">変換しようとした型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">このメソッドによって自動的にスローされます。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>この属性がバインドされているオブジェクトのコンバーターとして使用する型を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>この属性が関連付けられているオブジェクトのデータ コンバーターとして指定した型名を使用して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">この属性が関連付けられているオブジェクトのデータ変換で使用するクラスの完全修飾名。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>この属性が関連付けられているオブジェクトのデータ コンバーターとして型名を指定して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この属性が関連付けられているオブジェクトのデータ変換で使用するコンバーター クラスの型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>この属性が関連付けられているオブジェクトのコンバーターとして使用する <see cref="T:System.Type" /> の完全修飾型名を取得します。</summary>
      <returns>この属性が関連付けられているオブジェクトのコンバーターとして使用する <see cref="T:System.Type" /> の完全修飾型名。コンバーターとして使用する型がない場合は空の文字列 ("")。既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> の値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>属性、プロパティ、イベントなど、コンポーネントの特性に関する情報を提供します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>指定した型の型コンバーターを返します。</summary>
      <returns>指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は null なので、</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>使用できる型をリスト ボックスに読み込むために使用できる型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>使用可能な型として型の配列を使用して、<see cref="T:System.ComponentModel.TypeListConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="types">使用可能な型として使用する <see cref="T:System.Type" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、特定のコンテキストを使用してソース オブジェクトの特定の <see cref="T:System.Type" /> を変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">ソース オブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <returns>コンバーターが変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">フォントを表すときに使用するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は null なので、</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>16 ビット符号なし整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt16Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>32 ビット符号なし整数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt32Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>64 ビット符号なし整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt64Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
  </members>
</doc>